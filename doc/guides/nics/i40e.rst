..  BSD LICENSE
    Copyright(c) 2016 Intel Corporation. All rights reserved.
    All rights reserved.

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions
    are met:

    * Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in
    the documentation and/or other materials provided with the
    distribution.
    * Neither the name of Intel Corporation nor the names of its
    contributors may be used to endorse or promote products derived
    from this software without specific prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
    "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
    LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
    A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
    OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
    SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
    LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
    DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
    OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

I40E Poll Mode Driver
======================

The I40E PMD (librte_pmd_i40e) provides poll mode driver support
for the Intel X710/XL710/X722 10/40 Gbps family of adapters.


Features
--------

Features of the I40E PMD are:

- Multiple queues for TX and RX
- Receiver Side Scaling (RSS)
- MAC/VLAN filtering
- Packet type information
- Flow director
- Cloud filter
- Checksum offload
- VLAN/QinQ stripping and inserting
- TSO offload
- Promiscuous mode
- Multicast mode
- Port hardware statistics
- Jumbo frames
- Link state information
- Link flow control
- Mirror on port, VLAN and VSI
- Interrupt mode for RX
- Scattered and gather for TX and RX
- Vector Poll mode driver
- DCB
- VMDQ
- SR-IOV VF
- Hot plug
- IEEE1588/802.1AS timestamping


Prerequisites
-------------

- Identifying your adapter using `Intel Support
  <http://www.intel.com/support>`_ and get the latest NVM/FW images.

- Follow the DPDK :ref:`Getting Started Guide for Linux <linux_gsg>` to setup the basic DPDK environment.

- To get better performance on Intel platforms, please follow the "How to get best performance with NICs on Intel platforms"
  section of the :ref:`Getting Started Guide for Linux <linux_gsg>`.


Pre-Installation Configuration
------------------------------

Config File Options
~~~~~~~~~~~~~~~~~~~

The following options can be modified in the ``config`` file.
Please note that enabling debugging options may affect system performance.

- ``CONFIG_RTE_LIBRTE_I40E_PMD`` (default ``y``)

  Toggle compilation of the ``librte_pmd_i40e`` driver.

- ``CONFIG_RTE_LIBRTE_I40E_DEBUG_*`` (default ``n``)

  Toggle display of generic debugging messages.

- ``CONFIG_RTE_LIBRTE_I40E_RX_ALLOW_BULK_ALLOC`` (default ``y``)

  Toggle bulk allocation for RX.

- ``CONFIG_RTE_LIBRTE_I40E_INC_VECTOR`` (default ``n``)

  Toggle the use of Vector PMD instead of normal RX/TX path.
  To enable vPMD for RX, bulk allocation for Rx must be allowed.

- ``CONFIG_RTE_LIBRTE_I40E_RX_OLFLAGS_ENABLE`` (default ``y``)

  Toggle to enable RX ``olflags``.
  This is only meaningful when Vector PMD is used.

- ``CONFIG_RTE_LIBRTE_I40E_16BYTE_RX_DESC`` (default ``n``)

  Toggle to use a 16-byte RX descriptor, by default the RX descriptor is 32 byte.

- ``CONFIG_RTE_LIBRTE_I40E_QUEUE_NUM_PER_PF`` (default ``64``)

  Number of queues reserved for PF.

- ``CONFIG_RTE_LIBRTE_I40E_QUEUE_NUM_PER_VF`` (default ``4``)

  Number of queues reserved for each SR-IOV VF.

- ``CONFIG_RTE_LIBRTE_I40E_QUEUE_NUM_PER_VM`` (default ``4``)

  Number of queues reserved for each VMDQ Pool.

- ``CONFIG_RTE_LIBRTE_I40E_ITR_INTERVAL`` (default ``-1``)

  Interrupt Throttling interval.


Driver Compilation
~~~~~~~~~~~~~~~~~~

To compile the I40E PMD see :ref:`Getting Started Guide for Linux <linux_gsg>` or
:ref:`Getting Started Guide for FreeBSD <freebsd_gsg>` depending on your platform.


Linux
-----


Running testpmd
~~~~~~~~~~~~~~~

This section demonstrates how to launch ``testpmd`` with Intel XL710/X710
devices managed by ``librte_pmd_i40e`` in the Linux operating system.

#. Load ``igb_uio`` or ``vfio-pci`` driver:

   .. code-block:: console

      modprobe uio
      insmod ./x86_64-native-linuxapp-gcc/kmod/igb_uio.ko

   or

   .. code-block:: console

      modprobe vfio-pci

#. Bind the XL710/X710 adapters to ``igb_uio`` or ``vfio-pci`` loaded in the previous step:

   .. code-block:: console

      ./tools/dpdk_nic_bind.py --bind igb_uio 0000:83:00.0

   Or setup VFIO permissions for regular users and then bind to ``vfio-pci``:

   .. code-block:: console

      ./tools/dpdk_nic_bind.py --bind vfio-pci 0000:83:00.0

#. Start ``testpmd`` with basic parameters:

   .. code-block:: console

      ./x86_64-native-linuxapp-gcc/app/testpmd -c 0xf -n 4 -w 83:00.0 -- -i

   Example output:

   .. code-block:: console

      ...
      EAL: PCI device 0000:83:00.0 on NUMA socket 1
      EAL: probe driver: 8086:1572 rte_i40e_pmd
      EAL: PCI memory mapped at 0x7f7f80000000
      EAL: PCI memory mapped at 0x7f7f80800000
      PMD: eth_i40e_dev_init(): FW 5.0 API 1.5 NVM 05.00.02 eetrack 8000208a
      Interactive-mode selected
      Configuring Port 0 (socket 0)
      ...

      PMD: i40e_dev_rx_queue_setup(): Rx Burst Bulk Alloc Preconditions are
      satisfied.Rx Burst Bulk Alloc function will be used on port=0, queue=0.

      ...
      Port 0: 68:05:CA:26:85:84
      Checking link statuses...
      Port 0 Link Up - speed 10000 Mbps - full-duplex
      Done

      testpmd>


SR-IOV: Prerequisites and sample Application Notes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#. Load the kernel module:

   .. code-block:: console

      modprobe i40e

   Check the output in dmesg:

   .. code-block:: console

      i40e 0000:83:00.1 ens802f0: renamed from eth0

#. Bring up the PF ports:

   .. code-block:: console

      ifconfig ens802f0 up

#. Create VF device(s):

   Echo the number of VFs to be created into the ``sriov_numvfs`` sysfs entry
   of the parent PF.

   Example:

   .. code-block:: console

      echo 2 > /sys/devices/pci0000:00/0000:00:03.0/0000:81:00.0/sriov_numvfs


#. Assign VF MAC address:

   Assign MAC address to the VF using iproute2 utility. The syntax is:

   .. code-block:: console

      ip link set <PF netdev id> vf <VF id> mac <macaddr>

   Example:

   .. code-block:: console

      ip link set ens802f0 vf 0 mac a0:b0:c0:d0:e0:f0

#. Assign VF to VM, and bring up the VM.
   Please see the documentation for the *I40E/IXGBE/IGB Virtual Function Driver*.


Sample Application Notes
------------------------

Vlan filter
~~~~~~~~~~~

Vlan filter only works when Promiscuous mode is off.

To start ``testpmd``, and add vlan 10 to port 0:

.. code-block:: console

    ./app/testpmd -c ffff -n 4 -- -i --forward-mode=mac
    ...

    testpmd> set promisc 0 off
    testpmd> rx_vlan add 10 0


Flow Director
~~~~~~~~~~~~~

The Flow Director works in receive mode to identify specific flows or sets of flows and route them to specific queues.
The Flow Director filters can match the different fields for different type of packet: flow type, specific input set per flow type and the flexible payload.

The default input set of each flow type is::

   ipv4-other : src_ip_address, dst_ip_address
   ipv4-frag  : src_ip_address, dst_ip_address
   ipv4-tcp   : src_ip_address, dst_ip_address, src_port, dst_port
   ipv4-udp   : src_ip_address, dst_ip_address, src_port, dst_port
   ipv4-sctp  : src_ip_address, dst_ip_address, src_port, dst_port,
                verification_tag
   ipv6-other : src_ip_address, dst_ip_address
   ipv6-frag  : src_ip_address, dst_ip_address
   ipv6-tcp   : src_ip_address, dst_ip_address, src_port, dst_port
   ipv6-udp   : src_ip_address, dst_ip_address, src_port, dst_port
   ipv6-sctp  : src_ip_address, dst_ip_address, src_port, dst_port,
                verification_tag
   l2_payload : ether_type

The flex payload is selected from offset 0 to 15 of packet's payload by default, while it is masked out from matching.

Start ``testpmd`` with ``--disable-rss`` and ``--pkt-filter-mode=perfect``:

.. code-block:: console

   ./app/testpmd -c ffff -n 4 -- -i --disable-rss --pkt-filter-mode=perfect \
                 --rxq=8 --txq=8 --nb-cores=8 --nb-ports=1

Add a rule to direct ``ipv4-udp`` packet whose ``dst_ip=2.2.2.5, src_ip=2.2.2.3, src_port=32, dst_port=32`` to queue 1:

.. code-block:: console

   testpmd> flow_director_filter 0 mode IP add flow ipv4-udp  \
            src 2.2.2.3 32 dst 2.2.2.5 32 vlan 0 flexbytes () \
	    fwd pf queue 1 fd_id 1

Check the flow director status:

.. code-block:: console

   testpmd> show port fdir 0

   ######################## FDIR infos for port 0      ####################
     MODE:   PERFECT
     SUPPORTED FLOW TYPE:  ipv4-frag ipv4-tcp ipv4-udp ipv4-sctp ipv4-other
                           ipv6-frag ipv6-tcp ipv6-udp ipv6-sctp ipv6-other
			   l2_payload
     FLEX PAYLOAD INFO:
     max_len:	    16	        payload_limit: 480
     payload_unit:  2	        payload_seg:   3
     bitmask_unit:  2	        bitmask_num:   2
     MASK:
       vlan_tci: 0x0000,
       src_ipv4: 0x00000000,
       dst_ipv4: 0x00000000,
       src_port: 0x0000,
       dst_port: 0x0000
       src_ipv6: 0x00000000,0x00000000,0x00000000,0x00000000,
       dst_ipv6: 0x00000000,0x00000000,0x00000000,0x00000000
     FLEX PAYLOAD SRC OFFSET:
       L2_PAYLOAD:    0      1	    2	   3	  4	 5	6  ...
       L3_PAYLOAD:    0      1	    2	   3	  4	 5	6  ...
       L4_PAYLOAD:    0      1	    2	   3	  4	 5	6  ...
     FLEX MASK CFG:
       ipv4-udp:    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
       ipv4-tcp:    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
       ipv4-sctp:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
       ipv4-other:  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
       ipv4-frag:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
       ipv6-udp:    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
       ipv6-tcp:    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
       ipv6-sctp:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
       ipv6-other:  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
       ipv6-frag:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
       l2_payload:  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
     guarant_count: 1	        best_count:    0
     guarant_space: 512         best_space:    7168
     collision:     0	        free:	       0
     maxhash:	    0	        maxlen:        0
     add:	    0	        remove:        0
     f_add:	    0	        f_remove:      0


Delete all flow director rules on a port:

.. code-block:: console

   testpmd> flush_flow_director 0


Bifurcated driver guide on I40E
-------------------------------

The bifurcated driver is explained in :ref:`Bifurcated driver guide <bifurcated_driver>`.
And on Intel® X710/XL710 series Ethernet Controllers, Bifurcated driver can be achieved
by SR-IOV , cloud filter and L3 VEB switch. So the traffic can be directed to queues by
cloud filter and L3 VEB switch's matching rule.

*   L3 VEB filter for non-tunnelled packets. It can direct a packet just by the
    Destination IP address to a queue in a VF.

*   Cloud filters for tunnelled packets have following types.

    *   Inner mac

    *   Inner mac + VNI

    *   Outer mac + Inner mac + VNI

    *   Inner mac + Inner vlan + VNI

    *   Inner mac + Inner vlan

The step procedure is as following:

#.  Boot system without iommu, or with “iommu=pt”.

#.  Build and insert i40e.ko module.

#.  Create Virtual Functions:

    .. code-block:: console

        echo 2 > /sys/bus/pci/devices/0000:01:00.0/sriov_numvfs

#.  Add udp port offload to NIC if using cloud filter:

    .. code-block:: console

        ip li add vxlan0 type vxlan id 42 group 239.1.1.1 local 10.16.43.214 dev <dev_name>
        ifconfig vxlan0 up
        ip -d li show vxlan0

    .. note::

        Print “add vxlan port 8472, index 0 success” can be found in system log.

#.  Enable and set flow filters:

    *   L3 VEB filter, route whose dest IP = 192.168.50.108 to VF 0's queue 2.

    .. code-block:: console

        ethtool -N <dev_name> flow-type ip4 dst-ip 192.168.50.108 \
                user-def 0xffffffff00000000 action 2 loc 8

    *   Inner mac, route whose inner dest mac = 0:0:0:0:9:0 to PF's queue 6.

    .. code-block:: console

        ethtool -N <dev_name> flow-type ether dst 00:00:00:00:00:00 \
                m ff:ff:ff:ff:ff:ff src 00:00:00:00:09:00 m 00:00:00:00:00:00 \
                user-def 0xffffffff00000003 action 6 loc 1

    *   Inner mac + VNI, route whose inner dest mac = 0:0:0:0:9:0 and VNI = 8 to PF's queue 4.

    .. code-block:: console

        ethtool -N <dev_name> flow-type ether dst 00:00:00:00:00:00 \
                m ff:ff:ff:ff:ff:ff src 00:00:00:00:09:00 m 00:00:00:00:00:00 \
                user-def 0x800000003 action 4 loc 4

    *   Outer mac + Inner mac + VNI, route whose outer mac= 68:05:ca:24:03:8b, inner dest mac
        = c2:1a:e1:53:bc:57, and VNI = 8 to PF's  queue 2.

    .. code-block:: console

        ethtool -N <dev_name> flow-type ether dst 68:05:ca:24:03:8b \
                m 00:00:00:00:00:00 src c2:1a:e1:53:bc:57 m 00:00:00:00:00:00 \
                user-def 0x800000003 action 2 loc 2

    *   Inner mac + Inner vlan + VNI, route whose inner dest mac = 00:00:00:00:20:00,
        inner vlan = 10, and VNI = 8 to VF 0's queue 1

    .. code-block:: console

        ethtool -N <dev_name> flow-type ether dst 00:00:00:00:01:00 \
                m ff:ff:ff:ff:ff:ff src 00:00:00:00:20:00 m 00:00:00:00:00:00 \
                vlan 10 user-def 0x800000000 action 1 loc 5

    *   Inner mac + Inner vlan, route whose inner dest mac = 00:00:00:00:20:00,
        and inner vlan = 10 to VF 0's queue 1

    .. code-block:: console

        ethtool -N <dev_name> flow-type ether dst 00:00:00:00:01:00 \
                m ff:ff:ff:ff:ff:ff src 00:00:00:00:20:00 m 00:00:00:00:00:00 \
                vlan 10 user-def 0xffffffff00000000 action 1 loc 5

    .. note::

        *   If the upper 32 bits of 'user-def' are 0xffffffff, then the filter can
            be used for programming an L3 VEB filter, otherwise the upper 32 bits
            of 'user-def' can carry the tenant ID/VNI if specified/required.

        *   Cloud filters can be defined with inner mac, outer mac, inner ip, inner vlan
            and VNI as part of the cloud tuple. It is always the Destination (not source)
            mac/ip that these filters, filter on. For all these examples dst and src mac
            address fields are overloaded dst == outer, src == inner.

        *   Filter will be directing a packet who matching the rule to a vf id
            specified in the lower 32 bit of user-def to queue specified by 'action'.

        *   If the vf id specified by the lower 32 bit of user-def is greater than
            or equal to max_vfs, then the filter is for the PF queues.

#.  Compile the DPDK and insert igb_uio or probe vfio-pci kernel modules as normal.

#.  Bind virtual function:

    .. code-block:: console

        modprobe vfio-pci
        dpdk_nic_bind.py -b vfio-pci 01:10.0
        dpdk_nic_bind.py -b vfio-pci 01:10.1

#.  run DPDK application on VFs:

    .. code-block:: console

        testpmd -c 0xff -n 4 -- -i -w 01:10.0 -w 01:10.1 --forward-mode=mac

.. note::

    *   The above steps work on the i40e Linux kernel driver v1.5.16.

    *   Ethtool's version used in this example is 3.18. And the mask “ff” means not involved, while “00” or don’t set mask means involved.

    *   For more details of the configuration, can refer to the `cloud filter test plan <http://dpdk.org/browse/tools/dts/tree/test_plans/cloud_filter_test_plan.rst>`_